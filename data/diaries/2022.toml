

[[elements]]
title = "I generally don't care about Mauritian companies"
body = "Priyeshan Sreeneebus, game dev at Streamline Studios tells of his past work experiences: \"J'ai dÃ» quitter Ã  cause des conditions de travail qui ne me plaisaient pas\"\n\nIf it were mauritian companies, i am not surprised at all. It needs opportunities like that to make people realise what they missed. Excellent devs are prized.\n\nI no longer care about mauritian companies, unfortunately. They think they are big, doing big things but are very backwards and out of phase with technology trends. It should not have been a problem even then but their culture is not very nice and are work-focused instead of result-focused.\n\nCurrently not much companies contribute to OpenSource*. This is a dooming fact by itself. And they'll tell you this and that and this, but in the IT world, good company metrics are quite transparent. You can talk, bribe devs with facilities, but, at the end, good folks also want a company which has impact at world level.\n\nI applied only 1 or 2 times to mauritian companies to test the genuineness of their Python claims but no return as expected. Another one sent a Python interview which is rediculous in the Python world. I troll mauritian companies by sending OpenSource contributions in my CV when asked. They ask for CVs just for the fun, the fun they get.\n\nIf the HR cannot evaluate a CV, how do you trust the person to hire the right candidate? Surprisingly, interested people know how to find me.\nI care more for the developer community here. Mauritius indeed has more than bright individuals but i just hope that companies in here don't pump away their genius through the drain of a company culture that no longer serves it's purpose. They talk of agile but agile is not an instant solution for corporate mindset shift. You are only stirring already muddied water.\n\n* Outside of work where the company's product is OpenSource\n"

[[elements]]
title = "Beggers cannot be choosers: Corporates and language choice"
body = "Once an engineer working at one of the \nFAANG companies said that people who did not go to university preferred to work in one language compared to those who did not. Well it's not exactly like that.\n\nTech specialisation comes by need and joy. For learning purposes, knowing a vast range of tech is great. Peter Norvig recommends learning at least 12 langs to begin with, totally justified. But, at work it's different. There are many companies who built their products using one language, their engineers use one main language. This does not mean they make poor engineers. Also, being proficient in one tech is something not to be despised as you need to have a high standard in what you are doing.\n\nIf you work for yourself, you get to choose your tech stack, why choose something just for the sake of change? Myself, i'm always talking about\n, so much so that people do believe firmly that i don't know anything else. This sounds fake but many people do believe in it. People who are recognised for being pro-\nare not necessarily ignorant of\n, they might be Linux engineers.\n\nBut there is a main tech that people like, unless corporate malleability took away your ability to appreciate what is not dictated by your paycheck.\n\nThere is the notion that fundamentals are only what matters, tech not. In fact both matter.\n"


[[elements]]
title = "English: A Highly Illogical Language - Part 1"
body = "Let's take the first letter: a. Sometimes it has the pronunciation as in bay and sometimes the pronunciation it has with announce. One symbol, two pronunciations. We might as well say: aaaa aa aa aaaaaaaaaaaa. But it's confusing right? That's why we try hard to make it easy to people by having unique symbols for each sound.\n\nWhen used in bay, it would have been better written as bÃ©, more in line with European languages, as used in Swedish, Scottish and French.\n\nThis solves the issue of the pen which sounds like pÃ©n but as written should have been pronounced as pin. Interestingly pin should been written as pen since e has the sound as pronounced in leeds.\n\nLeader should have been written as leedar with the a as in action. Some goes for leaf -> leef. The a as in say does not sound.\n\nEnglish is taught by parrot learning. Don't deduce, just learn it like that. The common first words like house, bed and apple are actually written as haws, bÃ©d and app<>l.\n\nThere should have been a vowel between p and l in apple, at the very least it should have been appl.\n\nLinguists obviously use something like this: \"Ã¦p.É™l\", which half solves the problem\n"


[[elements]]
title = "English: A Highly Illogical Language - Part 2"
body = "Take the example of the word English itself. It gives an avant-goÃ»t. It should have been written as Englesh. S has the sound it has with so, see and sat. H has the sound as in hot, hill and horse. But s + h has the sound of a missing consonant. The English learner has to deduce that, of course.\n\nI has the sound as in life, lie and line. But it's a shortcut for a as in astonish and y as in your and yell. eye != i. i == ay. Fry is right in terms of the y. So, life becomes layf, lie becomes lay, and line becomes layn.\n\nTurning to o, you has a sound and your has a completely different sound. English lacks the ou sound in you. u is actually y + <missing vowel>. You should have been u and your should have been yor.\n\nYou learn English by experience and exposure. Since i don't know latin, i dearly hope it's a malformed latin simplification rather than a by design language. Unless of course you want the first introduction to literacy of a people be based on shaken grounds.\n"


[[elements]]
title = "English: A Highly Illogical Language - Part 3"
body = "Let's see one of the most used words in English: The. T has the sound as in tee, trunk and toe. H has the sound as in hope, heal, and hide. Th is not t + h, rather it is a missing consonant in English. Please give your tongue a good look to see how exactly you pronounce.\n\nThen there's the famous replacement of s with z but written as s when in between vowels. Eg. Isotope. Just write a z since you have the consonant. A point which Mauritius creole graciously makes use of to pass over some redundant French rule.\n\nThere is the famous r. Tare and tree give two completely different ways of pronouncing r. You are supposed to find out by yourself. The r in tree is same as in redundant, rose, river and try. The r in tare is the same as in tore, azure, bear and flair. It's a consonant with 2 pronunciations which as in other cases hides the fact that English misses yet another consonant. Masquerading the lack behind rules does not help.\n\nDespite the very scientific approach of Englishmen to many subjects, the teaching and learning of English is and remains an approximation.\n"


[[elements]]
title = "English: A Highly Illogical Language - Part 4"
body = "English does not have the concept of long vowels but does make use of it. Ways is pronounced as waays, not like the abrupt and short as written \"ways\". It is better written as wÃ©Ã©z though. It looks simple, not like other languages but you pay in terms of learning at the end.\n\nAn important aspect English speaking folks don't realise is that many times the consonant and the vowel are mixed together. B and be are pronounced similar. But as we have bore, bad etc it's clear that b has a sound not same as be. But if it's insisted that they do have the same sound, expect to be comfortable by bcause and to b scheduled.\n\nLet's see ck. Hack, lack, back. Are Englishmen afraid of writing hakk, bakk and lakk? We must really ask how actually c is pronounced. In create it is used as k and in cease as s. It is s or k. Rub it out of your language if it's redundant. Easier i guess than rubbing out empires.\n\nIt is a surprising sight for real Doctors of Philosophy arguing and chiseling the edifice of the informatics age while expressing themselves in incoherent ways. They see but have been made blind. They write day after day volumes, reaffirming with each letter the ability to accept contradictions.\n"


[[elements]]
title = "We helped 100+ people get into OpenSource"
body =  """
After a comment by Shamsuddin Rehmani, i decided to count how many people people we helped across all my projects on Github get into OpenSource (new to contributing on Github). It amounts to over 100 people ðŸŽ‰

We opened meaningful issues, not issues specially for people to get into OS. When we had small issues, we left some for people to take. Thus many times people were encouraged to contribute to the project itself. Many continued until they became core devs themselves. Though these are my projects, i'd like to thank maintainers who made this possible such as Gabriele Ron & my honeybot IRC bot contributors (These are great folks, too many to mention. Even non-maintainers like to help), Tim Thuma, Arthur Nangai, Nathan Heron - Morris and Shamsuddin Rehmani

Through these projects, myself and contributors have greatly benefitted. You name it. Jobs, assignments, contracts, this and that.

It has and is still a great ride. Unfortunately, out of these, only one or two is from Mauritius, my own country. The folks in here seem to think that it is a huge waste of time. It's great to use but ridiculous to contribute.

It's awesome in the sense that it is possible for normal devs to make a change!
"""

[[elements]]
title = "LinkedIn in one word: Junk"
body =  """
If i were to describe LinkedIn in one word it's:

junk

People might think it's too harsh, but day after day the things people post does not reflect what it's supposed to be. A network of professionals? Far from that. The motivational posts are encouraged by LinkedIn, they themselves post it. Is the world so demotivating? Are you so sad on your job? Is your choice in life so gloomy? That's the best of LinkedIn by the way.

If you have useless videos in your feed then you have not so nice contacts i get it. But few are posts that you benefit from. I am not talking by content. I am talking by type.

Except that most of the people are on this platform and you can contact them, i really don't see why have a LinkedIn account at all. It's a great way for spam to land in your inbox for sure, for people to nag you to like their pages and ... stalkers who view your profile and fly away.

I've benefited more from my posts when people ping me back or interact with them than me benefiting from other people's posts content. If you do good, you do it for yourself it seems.
"""

[[elements]]
title = "Receiving Github's NASA badge for Python contributions"
body =  """
Today Github awarded a badge to everybody who contributed to NASA's Mars Helicopter. Including the mauritian fellow in the pic below

> Today, nearly 12,000 developers will see a new badge on their 
> GitHub profile celebrating their contributions to the specific 
> versions of projects and libraries used by NASA to fly the Ingenuity Helicopter on Mars.

https://lnkd.in/dtR9Y3J

and there's a high dose of Python in that NASA thing. Dear mauritian folks who still think Python as a waste of time, weak, slow and of no value (those people still exist in plenty), it's might be the time to wake up! These people go like this:

> \"Python is slow, incapable etc\"
> \"But Python is used all over the world to do important stuffs\"
> \"Yes but you have this and that, use this and that. Python is slow. I don't use it\"
"""

[[elements]]
title = "Python at SpaceX"
body =  """


StackOverflow has 4 posts on Space, 2 of which mentions Python
https://lnkd.in/dphUVAN

In \"Testing software so it's reliable enough for space\" the infra guys mention: 
<<Python \"is for backend test running, build orchestration, and all our
web servers are python-based. It's a lot of little scripts and a lot of
big web services. >>. The interesting thing is that "all our
web servers are python-based\"

In \"Network protocols in orbit: Building a space-based ISP\" it mentions that <<Starlink software, both in satellites and on the ground, is written
almost exclusively in C++, with some prototyping development in Python.\"

\"For development and test of these algorithms, we have a full-scale
network simulation running in continuous integration on a
high-performance computing cluster. This simulation is capable of
running the C++ production code as well as running against prototype
code written in Python,>>

In sum, python is here and there and everywhere.
"""

[[elements]]
title = "Hiring rounds or hiring the right person?"
body =  """
Jake Dunlap shared that he found the number of interview rounds of 1-3 shockingly low (It should be 8 maybe?) I know companies in Mauritius having 6, i get it, they want the best and they do get the best. I have had the opportunity to work on projects surrounded by internationally recognised folks and i can say that the corporate vision of work is overrated. Sharp people take aim ping the right people and it's game on! Corporations hire people to look for talents many times which might be a sign that they should work more intelligently by gathering more intelligence. It's all about the setup you have and the goal you want to achieve. The team is a variable. We live through such a time that even after tough rounds recruiters are not satisfied that they hired the right person. I am talking at the FAANG scale.

I think i am the most 'normal' person here on LinkedIn, my profile does not have anything that you'd consider breath-taking according to the LinkedIn mindset. Yet i sometimes see incomplete statements like saying that the tea is not sweet just after eating some sweeter sweets but forgetting this fact. The recruiting process has many variables, very loose ones. People forming opinions do so on the premise of their own experiences and don't consider alternative arrangements. If you are sure you have the right person, would you interview him? No. If every time you take on people while being blindfolded and expecting the rounds to eliminate unwanted hires, well it works but can it not be more optimised?

In sum i have the impression that companies need to adjust few variables in their running and setup. This makes hiring way more easier not because of the hiring process itself. Most people think that over-engineering the hiring process to death is the answer to smart hiring. Recruiting folks don't see beyond the job board. And it's a great reflection on how people view life as a whole.
"""

[[elements]]
title = "Do we need standup meetings?"
body =  """
As long as i take projects from non-IT people, there are no stand-up meetings. But, when you are in relationship with IT companies, code more specifically, you have to attend stand-up meets. There are times when i worked remotely for some companies where we needed absolutely no meet for some 3 weeks. That was because i knew the area they took me in for as good as the folks over there and also because the tasks were pretty well defined.

Then there were companies who did meets which went for over an hour. It was really killing since i knew we did not really need those. I finally managed to get rid of those. The way it works is that when you know you are going to meet, you work in a kind of irresponsible way, knowing that you will meet to clear things up. I have always contributed to OpenSource and i can say that the discipline and standard it has coupled with normal text-only communications ensures that meets are not necessary, save to discuss ideas and direction. The only difference is that OpenSource does not have a deadline normally but even then i managed to apply the principles of OS contributions to projects with deadlines.

I was pleasantly surprised when i read Muhammad Hasan Khan (a current Google engineer) 's post on meets. He termed them as distractions when there are too much and that a 1-1 meet once a week with the manager is enough and that working remotely cut off the physical meet ceremonies. Like sometimes you don't need to be a X master to be able to have an eye for pragmatism.

I can only say that dear X masters, in addition with your Y certifications, please contribute to OpenSource. I don't say it's a magic pill but it does help a lot to understand how collaboration between people who don't know each other, working in different timezones helps produce the world's best softwares.
"""

[[elements]]
title = "Communities partnering up with big companies"
body =  """
It is very tempting to enter in a partnership with big companies. You get a ton of benefits. Even more tempting to not refuse their offers. Even harder if you are on your own.

However i believe a company's size, bribe power and engineering reputation should not gobble you up. I always took the OpenSource-and-hard way. This way you have a stable base to trade and options to choose.

Well if money, recognition or opportunities is your thing np but it takes some diligence not to pass it off as some great good, amazing endeavors.

So community-side Google, Microsoft and stuffs. It is hard to pass by, but sometimes it's good to remind these folks not to promote their company marketing under the community banner. Is it a dev fest or a fest to connect devs to my company?

Company sponsorship is different from the event being entirely under the aegis of one company. Community events do accept corporate sponsors to drive the community further but these companies specially Doogle shamelessly uses the community to drive the company forward.

Microzoft does it in the open. So you know you are being tricked and go for it anyway. But Doogle tries hard to pass it off as an all dev event.

Don't be someone who trades the community for personal benefits.
"""

[[elements]]
title = "Are big companies involvement in OpenSource a scam?"
body =  """
Namgyal BRISSON once said that many big companies use OpenSource for profit. Here's a case where according to the Verge, microsoft's head of the developer division (name written in the clear) could not bear to see features being given away for free.

So, if at higher levels, the OpenSource idea is shunned, we wonder why exactly they are involved at all. The closed-source philosophy is hard to get rid of. The .NET fellows after some identity crisis and disillusion finally found a way to readd the feature back.

Next time people laud Microzoft and their love of OpenSource and them being some angels or soemthing like that, here's some nice texts to go through

A better view:
https://lnkd.in/dn6HQq8Y

The Verge: https://lnkd.in/d2Kn5eii
"""

[[elements]]
title = "F* it, ship it"
body = """
Heroes live on disk, or on movie screens. Real heroes master debugging. When you hear rewrites, you r in for trouble. When uber decided to rewrite its app from scratch (An iOS and Android one), it already sounded like disaster was waiting to happen. Gergely Orosz recounts the launch process against all odds, battling even the legal team.

\"An hour later 
we have some ideas on what's going on. Two hours later it's a dead end: we start over. 
Three hours later it seems like it's a client-side issue that we need to hotfix. 
Four hours later, at 6am, we are pretty certain that this bug is not a client-side regression. 
We can just fix it on the backend: no client changes needed. 
We have 12 more hours to decide what to do and I'm exhausted.
 We agree to regroup in 4 hours with a fresh mind, and log off.\"
...

\"For three of us, it works like a charm.
Except for one engineer. \"
...
\"Another hour passes, and we're still not entirely sure what's wrong with the last edge case. 
Seems like his account might be compromised.\"
...
\"Do we play it safe and debug some more?\"
...
\"**** it, ship it.\"
...
\"A few people quit during the project, but the majority of resignation notices came after we shipped the app. Many people did not even stick around a few months for March bonuses. Most of these resignations were in the US offices. However, one of my teammates in Amsterdam also quit because of the extreme stress of the project. During these months, working very long hours and over weekends became a norm and strongly encouraged by leadership, burning many people out.\"
"""

[[elements]]
title = "The maze is in the mouse"
body = """
\"The maze is in the mouse\" says former Google eng Praveen Seshadri. Praveen worked for Google for a mandatory 3 year period until Google successful ingested AppSheet.

\"I joined Google just before the pandemic when the company I had co-founded, AppSheet, 
was acquired by Google Cloud. The acquiring team and executives welcomed us and treated us well. 
We joined with great enthusiasm and commitment to integrate 
AppSheet into Google and make it a success. Yet, now at the expiry of my three
 year mandatory retention period, I have left Google understanding how a once-great 
 company has slowly ceased to function.\"
...
\"Within Google, there is a collective delusion that the company is exceptional. And as is the case in all such delusions, the deluded ones are just mortals standing on the shoulders of the truly exceptional people who went before them and created an environment of wild success. \"
...
\"At the junior levels, Google has a challenging interview process and the general caliber of hires is good. Most of this raw talent is wasted and their skills gradually atrophy\"
...
\"Never mind if most people quietly complain about the overall inefficiency and incompetence.\"

Soumen Sarkar, was it an agile maze? \"Like mice, they are trapped in a maze of approvals, launch processes, legal reviews, performance reviews, exec reviews, documents, meetings, bug reports, triage, OKRs, H1 plans followed by H2 plans, all-hands summits, and inevitable reorgs.\"

@greg wilson, very poignant!
"""

[[elements]]
title = "Clever hans is THE example with Ai"
body = """
Gary Marcus alludes to clever hans in an article discussing Ai. I think this is THE example with Ai. Clever hans was a horse who could apparently solve maths questions. But, it was tapping it's hooves according to onlookers' reactions.

That's precisely what current models do. Look around, sense reactions and give results without understanding the context at all.

Clever hans could in theory perform all maths calculations which needed a whole real integer answer where the value was say less than 100. Ai is in the same spot. It just does not understand what a horse is.
"""

[[elements]]
title = "Don't make your APIs simple"
body = """
Hussein Nasser says: \"Don't make your APIs simple\". Meaning, prefer default configs over abstractions as, when things break, developers get to some options to fix around.

"They are back to the same sinking ship, except at least this sinking ship has a lifeboat attached to it that a developer may cling to. They look at the default values and understand what went wrong and override them if necessary."

I did not take it in that sense when i implemented the idea in meteomoris. For me, it was a conscious choice to let developers have added power.

```python
from meteomoris import Meteo
from meteomoris import get_main_message

Meteo.CHECK_INTERNET = True # Will check if there is internet
Meteo.EXIT_ON_NO_INTERNET = True # Will exit if no internet
Meteo.ALREADY_CHECKED_INTERNET = False
Meteo.DEBUG = False # used during development
Meteo.CACHE_PERMS = True # used internally, modify to refelct if cache file can be created
Meteo.CACHE_PATH = "." # If cache path can be customized, default to  site-packages

Meteo.today = "2023-11-10" # If you want to override cache data
Meteo.headers = {
         'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10.9; rv:32.0) Gecko/20100101 Firefox/32.0',
         'Accept' : 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8', 
         'Accept-Language' : 'en-US,en;q=0.5', 
         'Accept-Encoding' : 'gzip', 
         'DNT' : '1', # Do Not Track Request Header 
         'Connection' : 'close',
         'Sec-GPC': '1',
         'Sec-Fetch-Site': 'none',
         'Sec-Fetch-Mode': 'navigate',
         'Sec-Fetch-User': '?1',
         'Connection': 'keep-alive',
         'Upgrade-Insecure-Requests': '1'
     } # Redefine default headers here
print(get_main_message())
```

Article: 
https://lnkd.in/esA8aVnK

Metemoris package: 
https://lnkd.in/gJkTuCis
"""

[[elements]]
title = "I don't trust codingame"
body = """
I don't trust codingame if i want a Python member on my team. 

The reason why i don't like these type of tests is that they tend to be maths-oriented rather than testing for Python itself. People can be terrible Python coders and still pass the test. Like CodinGame must decide whether they want to test for programming or python skills. It's by far, far a Python3 certification thing. 

A production environment has so much ongoingbutor
"""

[[elements]]
title = "I am an official Rustlang contributor?"
body = """
ðŸŽ‰ I am an official rustlang contributor XD. A PR merged after months after many back and forths and also because I missed a maintainer message. 

âœ¨ The Story

I downloaded rustlang to compile and play around. I noticed that it was doing some weird Github checks. I just wanted to point out that the code was not working as intended.

âœ¨ The Issue

I originally proposed an implementation to notify users that part of the checks was temporarily not working and they should not be worried. Finally, the maintainers decided that it was not worth it to check with Github, and they decided to remove the whole feature, which I did.

link: https://lnkd.in/e6w7peN7
"""

[[elements]]
title = "Pouring $10B in chatGPT is a losing game"
body = """
Pouring $10 billion into chatGPT is a losing game.

The tech behind it is immature, the problem remains unsolved.

If a company cannot tweak a search engine, it's hilarious that it thinks that throwing money will buy superiority.

It was maybe understandable if the company was not into tech and did not have an award-winning research division around.
"""


[[elements]]
title = "I like Python because of maths puns"
body = """
A cyclic group is a group of elements containing a 'generator', which is used to generate all of the other elements in the group by repeating a calculation.

One of the reasons i like Python is because it is riddled with mathematical puns, in many shapes and forms.

A generator yields a number. Numbers can be lazily evaluated. If we are at the 1000000000th of a term and we need the next one, we just yield the next one. We save space as we don't have to pre-compute 1000000000s of numbers.
"""

[[elements]]
title = "Hire to fire"
body = """
Hire to fire is always a bad formula according to me.

And, emperor Zuck had to take personal blame for it.

You can put your name on the line for tough business decisions but, for something as trite as hiring, it's not worth it.

I wonder if it was done just to follow the trend and it's not only a pandemic effect.
"""

[[elements]]
title = "The material is grounded in tactile reality and open to magic"
body = """
A part of Google's Material Design description is quite creepy:

"The material is grounded in tactile reality, inspired by the study of paper and ink, yet technologically advanced and open to imagination and magic"

This quote has nothing to do with interface design or programming. Technology does not mean programming. Taking it far away from tech, it is a deep line of conduct. 

The material has connection with the physical. It denotes the physical which can be perceived by the sense of touch. Well, the material is what is perceived by senses but more importantly, that can be concretely touched.

Ink and paper has been around for thousands of years. Something written on ink and paper can be a piece of paper, a page or many pages, called a book. If it's inspired by books, we wonder which ones?
"""

[[elements]]
title = "Part of stupidity is to follow every piece of valid information"
body = """
Part of stupidity is to follow every piece of valid information. 

Not having the wisdom to weigh each element in its proper place can lead to disastrous consequences.

A good many causes of frustration are having wrong expectations based on wrong assumptions. If someone takes a person as a role model but the context cannot be applied, then the person has a high chance of falling into depression.

If a person always saw people doing x job having successful careers and spends years trying to obtain that post but finds reality in his country different, he might be depressed. It's might be true that the global median salary is in such and such ranges, but it might not apply in every case of x job.

PEP8 might recommend this and that style. X, Y, and Z big projects might be respecting the convention but it does not mean it should be applied in all codebases. The style guide is considerate enough to devote a section to this point that most people never read.

It might look foolish that people fall for decisions based on one, two, three, or ten valid points, but it routinely happens.

The purpose of the information is well, to inform. How to take decisions should also be learned.
"""

[[elements]]
title = "Every post on LinkedIn is not for you"
body = """
Every post on LinkedIn is not for you. 

As successful as a person can be, their advice doesn't necessarily apply to you!

First, a person must decide whether or not the advice applies to their current context. If a piece of advice is for climbing the ladder in a field, it does not mean it will bring out successful results in another field.

Secondly, for the same context, a person must see if the advice corresponds to the levels of the advice. If the recommendation concerns investment in x and y, the person must determine if they have the starting funds to start. If not, they need to find advice concerning starting from scratch. 

Also, before implementing advice, do confirm with great people. I do recommend following Andy Wong for great software eng pieces.

Wisdom is not following every piece of valid information.
"""

[[elements]]
title = "Likes are not a usefulness metric"
body = """
Like is not the ultimate evaluation of usefulness.

Many of my most useful lessons learned the hard way got poor metrics. Few engagements -> fewer views.

Thing is, if you tell the truth and people are uncomfortable with that, you won't be popular.

People need to either 

1. compromise the truth and optimise for quick engagements
2. transform truth in a palatable manner
3. consistently post the truth up until people realise that's what's best

Option 3. is the way to go. And Linkedin, unfortunately, favours engagements, so, don't take heed to likes if your content is good.

Algorithms at some point will always mirror the truth, don't optimise for algorithms.
"""

[[elements]]
title = "I don't trust Mycrowsoft with OpenSource"
body = """
I don't trust the crow (My Crow Soft if you are wondering) to care about the community or OpenSource.

The crow is a for-profit company with a shameless for-profit attitude. Since developers like OpenSource, Microsoft does have open source initiatives but only as long and where it serves it's interest.

Guido going to work for the crow is just a way for Microsoft to lock in users to use their products. Perfecting the Language Server Protocol (LSP) is a big feat. It is a protocol used to decouple a tool (IDE in this case) and the service providing language analysis perks. If your tool has the best support in terms of auto-complete and suggestions, people would prefer it to another tool.

The crow successfully managed to fish another core developer from before: Brett Cannon. 

PyLance if my memory is right, started as an OpenSource project. Now Github's microsoft/pylance redirects to a repository erased of it's code. Use OS labour then kind of throw it in the bin for the general public.

The crow's model is an incredible lesson in monetization. But it performs poorly in trying to be a model of goodness and mercy for the soft world.

" Crows are often seen as single birds flying low over fields ... looking out for their next meal."

Thanks Soumen Sarkar for this post!

Edit: It was PyRight which they archived
https://lnkd.in/dXhQv63R
"""

[[elements]]
title = "How to build a good showcase"
body = """
People wonder: how to build a good showcase?

You need only 3 items in your showcase.

The showcase has to provide value to potential buyers. It applies to companies and individuals.

The showcase needs to be state-of-the-art items. It must show capabilities that exceed 80% of that of your audience.

It must show that you know the subject matter. But that's not all. If you show dry, technical documentations, it will appeal to even less people.

That's why it has to highlight the technical aspects in an interesting way.

Solving and explaining a problem is a great idea (case studies). A great, useful and needed product is another.

You need depth instead of breadth /
"""

[[elements]]
title = "How to get first clients"
body = """
People really ask how to get their first clients?

It's easy, first it needs a change of mindset. You need to determine the mode you are operating on and fix it.

If you are freelancing (or startuping) full or part time, you decide. But don't be in a half-hearted freelancing or non-freelancing mode. 

The amount of time or dedication you fix, work on that to get the highest returns.

Then work on your level. Great level brings in great products.

But, if your showcase is dull, people won't be interested.

You need first-glance impactful/extraordinary projects.

Then deliver, you need to deliver. Delivering will prepare you to deliver even better.

You just need to ... start.
"""

[[elements]]
title = "The Silicon Valley is plunging the world into techno-religiousness"
body = """
The Silicon Valley is plunging the world into techno-religiousness. It's always the Silicon Valley as long as it's not found in your continent. 

If a country or continent develops bleeding-edge technologies, their own people have a sense of belonging and laud the innovation.

As soon as it's beyond borders, suddenly people care about health and well being and also of course the need not to import some devilish merch from abroad.

Privacy, sanity, and scrutiny are relevant as long as they throw the competition under the bus. These are readily puffed out of the scene if there are economic gains around.
"""

[[elements]]
title = "OpenSource is an incredible career asset"
body = """
After sometimes I realised that contributing to OpenSource is an incredible asset.

As time passes, one realises that questions about impact as a junior engineer, how to do amazing code reviews etc are covered 80% if you have a good OpenSource background (soft skills the other 20%).

This is true at even FAANG level. 

FAANG companies remain well, companies. Broader OpenSource lessons beat FAANG insights many times. Lessons in supply chain and dependency for example are better learnt in an OpenSource context than at a company by itself.

The robustness and thoroughness some open projects have are just over the moon ðŸš€. Contribution, maintenance and dealing with people are 3 incredible keys that you pocket for free.
"""

[[elements]]
title = "Ai is just adaptively automating automation"
body = """
Ai is just adaptively automating automation. It's the meta-automation of tasks. At its core, it's just dealing with patterns and their recognition which is another word for learning.

Since any form of input, text or image, is stored as data, a program trains until it has a general idea of what it is looking for. Any new input is checked against a general pattern. The original input can also be pairs of different types of data. As the training goes on, the program can isolate what part/s of each type of input data correspond. It can be used to check if a new pair of data is valid or, given one pair of data, it can find the other pair. It's how DALL-E works (text and image pairs). And DALL-E's algorithm can also be used for more types of pair inputs. 

It is a shame that the Ai field's aim is to imitate the human brain. It's just some copy-pasta. McCulloch-Pitts neurons are the result of a neurophysiologist and logician working together to develop a mathematical model based on the workings of the brain. Later literature had to weed out and sand off a lot of biological references and elements to get workable, software-friendly models. If the aim is to develop context-aware, resilient, autonomous, and wishes-complying software, there can be more ways to do that. But, if the aim is to have human-like workers which can work 24/7, then we are heading towards a profit-first and interest-centered dreamland.
"""

[[elements]]
title = "VCs don't save the financially unwise"
body = """
VC funding & Co. were never an option if the startup is not very wise financially. If the business does not work, at one time the cash pump will disconnect, Fast. 

It bugs me to see people having the habit to solicit funds without a clear monetizing plan in sight. If someone is just providing a great service and that's it, it's not enough. Hope that investors are not only investing because 'they believe in the product'.

With the poor financial knowledge I have, it's clear that if you don't have a good plan for profit, it's not going to work. Hiring like crazy for the sake of it works not. 

And people always wonder why the balloon popped.
"""

[[elements]]
title = "University competitions serve corporates, not students"
body = """
What uni students don't realise that initiatives by corporations is to serve corporate interests. It does not mean the students are poor coders or the solutions are bad. 

The price might be tempting but everyone plays their part!
"""


[[elements]]
title = "For community events prefer the community, not big corp x"
body = """
Many non-business entities partner with companies to enhance their grasp on a topic. In doing so, they increase their relationship with big-corp-x.

Now, big-corp-x benefits by getting new recruits and publicity. But they give their vision of things, squashing when needed competitor references which might have benefited their audience.

That's why as an organiser of events for your company or university club, if you want to get insights on a topic, look for people in that field. Prefer technology over company promotion.

You will benefit financially if you partner with big-corp-x but you will grow in a particular field if you are technology-specific. Your range of speakers will most probably outnumber what you would have got with big-corp-x. And the speakers will be from many companies, getting insights from a number of resources.

At the end, it will be speakers employed somewhere but the scope will be different. It's more work on your part to find people to speak but you can customise your upskill path. The upgrade you get is tradable well beyond big-corp-x.

Big-corp-x offering money for you to organise events does not mean you should do it. Anti-monopoly law does not apply yet for this particular scenario.

Many organisers do not realise they are being gobbled up by one single company. And companies prefer their well being over yours. When big-corp-x organises a hackathon, it will be on topics he needs, not necessarily on techs you need. And poor students think they won't get jobs if they don't partner with big-corp-x.
"""


[[elements]]
title = "The smiling emoji does not represent happiness always"
body = """
:-) or ðŸ˜€ or U+1F600 does not unfortunately represent happiness in all cases. Sometimes i wonder when i last saw it representing genuine good.

Sometimes it's an outright slap, when correcting someone who said something wrong*

Sometimes it's a substitute for (ðŸ˜ˆ, U+1F608), but cannot do so out of civility.

Sometimes you would discover that the person is in fact somewhat toxic. And uses :-) to encourage going in a direction, going for a call to action. It's a bait in summary.

Sometimes the person is in a sad mood but sends :-) anyways.

Maybe it's better not to use it at all.

* specially in programming, when someone said something technically unsound.
"""
